{"version":3,"sources":["helpers/lstCountries.js","components/InputCountry.js","helpers/getSpotifyAlbum.js","components/SongGridItem.js","hooks/useFetchSpotifyAlbum.js","helpers/getMusixMatchSongs.js","helpers/getSpotifyToken.js","components/CountryGrid.js","hooks/useFetchMusixMatchSongs.js","hooks/useFetchSpotifyToken.js","components/Footer.js","TopTenSongsByCountry.js","index.js"],"names":["lstCountries","key","name","foundCountry","InputCountry","setCountries","paises","countries","useState","inputCountry","setInputCountry","className","onSubmit","e","preventDefault","input","trim","toUpperCase","filter","country","pais","undefined","includes","type","value","onChange","target","placeholder","require","config","getSpotifyAlbum","artist","token","a","frmName","formurlencoded","encName","replace","fetch","method","headers","resultQ","json","dataQ","tracks","items","length","arrUrl","album","images","img","url","external_urls","spotify","SongGridItem","urlLyrics","askingAlbum","state","setState","useEffect","then","spotifyAlbum","askingToken","useFecthSpotifyAlbum","albumFound","console","log","href","rel","src","alt","width","height","getMusixMatchSongs","setInfoFound","c","codeCountry","process","resp","message","track_list","body","songs","map","song","id","track","track_id","artist_name","album_name","track_name","track_share_url","getSpotifyToken","btoa","result","data","access_token","CountryGrid","setInfoNotFound","loading","useFetchMusixMatchSongs","topTenFound","tokenProvided","useFetchSpotifyToken","Footer","year","Date","getFullYear","TopTenSongsByCountry","infoFound","i","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a8338a1e.chunk.js","sourcesContent":["// Regarding key, see note at the end \r\nconst lstCountries = [\r\n{key: \"XW\", name: \"Worldwide\"},\r\n{key: \"AF\", name: \"Afghanistan\"},\r\n{key: \"AL\", name: \"Albania\"},\r\n{key: \"DZ\", name: \"Algeria\"},\r\n{key: \"AS\", name: \"American Samoa\"},\r\n{key: \"AD\", name: \"Andorra\"},\r\n{key: \"AO\", name: \"Angola\"},\r\n{key: \"AI\", name: \"Anguilla\"},\r\n{key: \"AQ\", name: \"Antarctica\"},\r\n{key: \"AG\", name: \"Antigua And Barbuda\"},\r\n{key: \"AR\", name: \"Argentina\"},\r\n{key: \"AM\", name: \"Armenia\"},\r\n{key: \"AW\", name: \"Aruba\"},\r\n{key: \"AU\", name: \"Australia\"},\r\n{key: \"AT\", name: \"Austria\"},\r\n{key: \"AZ\", name: \"Azerbaijan\"},\r\n{key: \"BS\", name: \"Bahamas\"},\r\n{key: \"BH\", name: \"Bahrain\"},\r\n{key: \"BD\", name: \"Bangladesh\"},\r\n{key: \"BB\", name: \"Barbados\"},\r\n{key: \"BY\", name: \"Belarus\"},\r\n{key: \"BE\", name: \"Belgium\"},\r\n{key: \"BZ\", name: \"Belize\"},\r\n{key: \"BJ\", name: \"Benin\"},\r\n{key: \"BM\", name: \"Bermuda\"},\r\n{key: \"BT\", name: \"Bhutan\"},\r\n{key: \"BO\", name: \"Bolivia\"},\r\n{key: \"BA\", name: \"Bosnia And Herzegowina\"},\r\n{key: \"BW\", name: \"Botswana\"},\r\n{key: \"BV\", name: \"Bouvet Island\"},\r\n{key: \"BR\", name: \"Brazil\"},\r\n{key: \"IO\", name: \"British Indian Ocean Territory\"},\r\n{key: \"BN\", name: \"Brunei Darussalam\"},\r\n{key: \"BG\", name: \"Bulgaria\"},\r\n{key: \"BF\", name: \"Burkina Faso\"},\r\n{key: \"BI\", name: \"Burundi\"},\r\n{key: \"KH\", name: \"Cambodia\"},\r\n{key: \"CM\", name: \"Cameroon\"},\r\n{key: \"CA\", name: \"Canada\"},\r\n{key: \"CV\", name: \"Cape Verde\"},\r\n{key: \"KY\", name: \"Cayman Islands\"},\r\n{key: \"CF\", name: \"Central African Republic\"},\r\n{key: \"TD\", name: \"Chad\"},\r\n{key: \"CL\", name: \"Chile\"},\r\n{key: \"CN\", name: \"China\"},\r\n{key: \"CX\", name: \"Christmas Island\"},\r\n{key: \"CC\", name: \"Cocos (Keeling) Islands\"},\r\n{key: \"CO\", name: \"Colombia\"},\r\n{key: \"KM\", name: \"Comoros\"},\r\n{key: \"CG\", name: \"Congo\"},\r\n{key: \"CK\", name: \"Cook Islands\"},\r\n{key: \"CR\", name: \"Costa Rica\"},\r\n{key: \"CI\", name: \"Cote D'Ivoire\"},\r\n{key: \"HR\", name: \"Croatia (Local Name: Hrvatska)\"},\r\n{key: \"CU\", name: \"Cuba\"},\r\n{key: \"CY\", name: \"Cyprus\"},\r\n{key: \"CZ\", name: \"Czech Republic\"},\r\n{key: \"DK\", name: \"Denmark\"},\r\n{key: \"DJ\", name: \"Djibouti\"},\r\n{key: \"DM\", name: \"Dominica\"},\r\n{key: \"DO\", name: \"Dominican Republic\"},\r\n{key: \"TP\", name: \"East Timor\"},\r\n{key: \"EC\", name: \"Ecuador\"},\r\n{key: \"EG\", name: \"Egypt\"},\r\n{key: \"SV\", name: \"El Salvador\"},\r\n{key: \"GQ\", name: \"Equatorial Guinea\"},\r\n{key: \"ER\", name: \"Eritrea\"},\r\n{key: \"EE\", name: \"Estonia\"},\r\n{key: \"ET\", name: \"Ethiopia\"},\r\n{key: \"FK\", name: \"Falkland Islands (Malvinas)\"},\r\n{key: \"FO\", name: \"Faroe Islands\"},\r\n{key: \"FJ\", name: \"Fiji\"},\r\n{key: \"FI\", name: \"Finland\"},\r\n{key: \"FR\", name: \"France\"},\r\n{key: \"GF\", name: \"French Guiana\"},\r\n{key: \"PF\", name: \"French Polynesia\"},\r\n{key: \"TF\", name: \"French Southern Territories\"},\r\n{key: \"GA\", name: \"Gabon\"},\r\n{key: \"GM\", name: \"Gambia\"},\r\n{key: \"GE\", name: \"Georgia\"},\r\n{key: \"DE\", name: \"Germany\"},\r\n{key: \"GH\", name: \"Ghana\"},\r\n{key: \"GI\", name: \"Gibraltar\"},\r\n{key: \"GR\", name: \"Greece\"},\r\n{key: \"GL\", name: \"Greenland\"},\r\n{key: \"GD\", name: \"Grenada\"},\r\n{key: \"GP\", name: \"Guadeloupe\"},\r\n{key: \"GU\", name: \"Guam\"},\r\n{key: \"GT\", name: \"Guatemala\"},\r\n{key: \"GN\", name: \"Guinea\"},\r\n{key: \"GW\", name: \"Guinea-Bissau\"},\r\n{key: \"GY\", name: \"Guyana\"},\r\n{key: \"HT\", name: \"Haiti\"},\r\n{key: \"HM\", name: \"Heard And Mc Donald Islands\"},\r\n{key: \"VA\", name: \"Holy See (Vatican City State)\"},\r\n{key: \"HN\", name: \"Honduras\"},\r\n{key: \"HK\", name: \"Hong Kong\"},\r\n{key: \"HU\", name: \"Hungary\"},\r\n{key: \"IS\", name: \"Icel And\"},\r\n{key: \"IN\", name: \"India\"},\r\n{key: \"ID\", name: \"Indonesia\"},\r\n{key: \"IR\", name: \"Iran (Islamic Republic Of)\"},\r\n{key: \"IQ\", name: \"Iraq\"},\r\n{key: \"IE\", name: \"Ireland\"},\r\n{key: \"IL\", name: \"Israel\"},\r\n{key: \"IT\", name: \"Italy\"},\r\n{key: \"JM\", name: \"Jamaica\"},\r\n{key: \"JP\", name: \"Japan\"},\r\n{key: \"JO\", name: \"Jordan\"},\r\n{key: \"KZ\", name: \"Kazakhstan\"},\r\n{key: \"KE\", name: \"Kenya\"},\r\n{key: \"KI\", name: \"Kiribati\"},\r\n{key: \"KP\", name: \"Korea, Dem People'S Republic\"},\r\n{key: \"KR\", name: \"Korea, Republic Of\"},\r\n{key: \"KW\", name: \"Kuwait\"},\r\n{key: \"KG\", name: \"Kyrgyzstan\"},\r\n{key: \"LA\", name: \"Lao People'S Dem Republic\"},\r\n{key: \"LV\", name: \"Latvia\"},\r\n{key: \"LB\", name: \"Lebanon\"},\r\n{key: \"LS\", name: \"Lesotho\"},\r\n{key: \"LR\", name: \"Liberia\"},\r\n{key: \"LY\", name: \"Libyan Arab Jamahiriya\"},\r\n{key: \"LI\", name: \"Liechtenstein\"},\r\n{key: \"LT\", name: \"Lithuania\"},\r\n{key: \"LU\", name: \"Luxembourg\"},\r\n{key: \"MO\", name: \"Macau\"},\r\n{key: \"MK\", name: \"Macedonia\"},\r\n{key: \"MG\", name: \"Madagascar\"},\r\n{key: \"MW\", name: \"Malawi\"},\r\n{key: \"MY\", name: \"Malaysia\"},\r\n{key: \"MV\", name: \"Maldives\"},\r\n{key: \"ML\", name: \"Mali\"},\r\n{key: \"MT\", name: \"Malta\"},\r\n{key: \"MH\", name: \"Marshall Islands\"},\r\n{key: \"MQ\", name: \"Martinique\"},\r\n{key: \"MR\", name: \"Mauritania\"},\r\n{key: \"MU\", name: \"Mauritius\"},\r\n{key: \"YT\", name: \"Mayotte\"},\r\n{key: \"MX\", name: \"Mexico\"},\r\n{key: \"FM\", name: \"Micronesia, Federated States\"},\r\n{key: \"MD\", name: \"Moldova, Republic Of\"},\r\n{key: \"MC\", name: \"Monaco\"},\r\n{key: \"MN\", name: \"Mongolia\"},\r\n{key: \"MS\", name: \"Montserrat\"},\r\n{key: \"MA\", name: \"Morocco\"},\r\n{key: \"MZ\", name: \"Mozambique\"},\r\n{key: \"MM\", name: \"Myanmar\"},\r\n{key: \"NA\", name: \"Namibia\"},\r\n{key: \"NR\", name: \"Nauru\"},\r\n{key: \"NP\", name: \"Nepal\"},\r\n{key: \"NL\", name: \"Netherlands\"},\r\n{key: \"AN\", name: \"Netherlands Ant Illes\"},\r\n{key: \"NC\", name: \"New Caledonia\"},\r\n{key: \"NZ\", name: \"New Zealand\"},\r\n{key: \"NI\", name: \"Nicaragua\"},\r\n{key: \"NE\", name: \"Niger\"},\r\n{key: \"NG\", name: \"Nigeria\"},\r\n{key: \"NU\", name: \"Niue\"},\r\n{key: \"NF\", name: \"Norfolk Island\"},\r\n{key: \"MP\", name: \"Northern Mariana Islands\"},\r\n{key: \"NO\", name: \"Norway\"},\r\n{key: \"OM\", name: \"Oman\"},\r\n{key: \"PK\", name: \"Pakistan\"},\r\n{key: \"PW\", name: \"Palau\"},\r\n{key: \"PA\", name: \"Panama\"},\r\n{key: \"PG\", name: \"Papua New Guinea\"},\r\n{key: \"PY\", name: \"Paraguay\"},\r\n{key: \"PE\", name: \"Peru\"},\r\n{key: \"PH\", name: \"Philippines\"},\r\n{key: \"PN\", name: \"Pitcairn\"},\r\n{key: \"PL\", name: \"Poland\"},\r\n{key: \"PT\", name: \"Portugal\"},\r\n{key: \"PR\", name: \"Puerto Rico\"},\r\n{key: \"QA\", name: \"Qatar\"},\r\n{key: \"RE\", name: \"Reunion\"},\r\n{key: \"RO\", name: \"Romania\"},\r\n{key: \"RU\", name: \"Russian Federation\"},\r\n{key: \"RW\", name: \"Rwanda\"},\r\n{key: \"KN\", name: \"Saint K Itts And Nevis\"},\r\n{key: \"LC\", name: \"Saint Lucia\"},\r\n{key: \"VC\", name: \"Saint Vincent, The Grenadines\"},\r\n{key: \"WS\", name: \"Samoa\"},\r\n{key: \"SM\", name: \"San Marino\"},\r\n{key: \"ST\", name: \"Sao Tome And Principe\"},\r\n{key: \"SA\", name: \"Saudi Arabia\"},\r\n{key: \"SN\", name: \"Senegal\"},\r\n{key: \"SC\", name: \"Seychelles\"},\r\n{key: \"SL\", name: \"Sierra Leone\"},\r\n{key: \"SG\", name: \"Singapore\"},\r\n{key: \"SK\", name: \"Slovakia (Slovak Republic)\"},\r\n{key: \"SI\", name: \"Slovenia\"},\r\n{key: \"SB\", name: \"Solomon Islands\"},\r\n{key: \"SO\", name: \"Somalia\"},\r\n{key: \"ZA\", name: \"South Africa\"},\r\n{key: \"GS\", name: \"South Georgia , S Sandwich Is.\"},\r\n{key: \"ES\", name: \"Spain\"},\r\n{key: \"LK\", name: \"Sri Lanka\"},\r\n{key: \"SH\", name: \"St. Helena\"},\r\n{key: \"PM\", name: \"St. Pierre And Miquelon\"},\r\n{key: \"SD\", name: \"Sudan\"},\r\n{key: \"SR\", name: \"Suriname\"},\r\n{key: \"SJ\", name: \"Svalbard, Jan Mayen Islands\"},\r\n{key: \"SZ\", name: \"Sw Aziland\"},\r\n{key: \"SE\", name: \"Sweden\"},\r\n{key: \"CH\", name: \"Switzerland\"},\r\n{key: \"SY\", name: \"Syrian Arab Republic\"},\r\n{key: \"TW\", name: \"Taiwan\"},\r\n{key: \"TJ\", name: \"Tajikistan\"},\r\n{key: \"TZ\", name: \"Tanzania, United Republic Of\"},\r\n{key: \"TH\", name: \"Thailand\"},\r\n{key: \"TG\", name: \"Togo\"},\r\n{key: \"TK\", name: \"Tokelau\"},\r\n{key: \"TO\", name: \"Tonga\"},\r\n{key: \"TT\", name: \"Trinidad And Tobago\"},\r\n{key: \"TN\", name: \"Tunisia\"},\r\n{key: \"TR\", name: \"Turkey\"},\r\n{key: \"TM\", name: \"Turkmenistan\"},\r\n{key: \"TC\", name: \"Turks And Caicos Islands\"},\r\n{key: \"TV\", name: \"Tuvalu\"},\r\n{key: \"UG\", name: \"Uganda\"},\r\n{key: \"UA\", name: \"Ukraine\"},\r\n{key: \"AE\", name: \"United Arab Emirates\"},\r\n{key: \"GB\", name: \"United Kingdom\"},\r\n{key: \"US\", name: \"United States\"},\r\n{key: \"UM\", name: \"United States Minor Is.\"},\r\n{key: \"UY\", name: \"Uruguay\"},\r\n{key: \"UZ\", name: \"Uzbekistan\"},\r\n{key: \"VU\", name: \"Vanuatu\"},\r\n{key: \"VE\", name: \"Venezuela\"},\r\n{key: \"VN\", name: \"Viet Nam\"},\r\n{key: \"VG\", name: \"Virgin Islands (British)\"},\r\n{key: \"VI\", name: \"Virgin Islands (U.S.)\"},\r\n{key: \"WF\", name: \"Wallis And Futuna Islands\"},\r\n{key: \"EH\", name: \"Western Sahara\"},\r\n{key: \"YE\", name: \"Yemen\"},\r\n{key: \"ZR\", name: \"Zaire\"},\r\n{key: \"ZM\", name: \"Zambia\"},\r\n{key: \"ZW\", name: \"Zimbabwe\"}];\r\n\r\nexport default lstCountries;\r\n\r\n// For the abbreviation of the countries would be fantastic using the key as a descriptive word\r\n// rather than key. However, for a reason, when key is used is use to define the key in some \r\n// list, it does not work.","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport lstCountries from '../helpers/lstCountries'\r\n\r\nlet foundCountry = true;\r\n\r\nexport const InputCountry = ({setCountries, countries: paises}) => { // we rename countries for the sake of clarity\r\n// PENDING: Right now the user needs to make sure that new countries are differents because\r\n// they also are used as keys in the LyricsFinderApp's ol list. \r\n// If we want to verify in here, then we would need to receive countries as parameter as well.\r\n// However, later on I suppose we are going to implement a mechanism to set keys in a better way.\r\n\r\n    const [inputCountry, setInputCountry] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputCountry(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n               \r\n        // We could receive countries as a pamameter in the AddCountry arguments.\r\n        // However, that is not necessary since the setCountries callback function\r\n        // already has an implicit reference to countries.\r\n        // We are validating only if the input is not an empty string.\r\n        // PENDING: delete country\r\n        \r\n        // Lets receive the first element of the array\r\n        const input = inputCountry.trim().toUpperCase()\r\n        const [pais] = lstCountries.filter(country=>country.name.toUpperCase()=== input);\r\n        // console.log(pais);\r\n        \r\n        if (pais !== undefined){ \r\n            if (!paises.includes(pais.name)){ \r\n                setCountries(countries => ([pais.name,...countries]));\r\n                foundCountry = true;\r\n            }\r\n            // setInputCountry('');\r\n        } else {\r\n            // setInputCountry('');\r\n            foundCountry = false;\r\n        }           \r\n        setInputCountry('');\r\n    }\r\n\r\n    return (\r\n        <form className=\"create-country\" onSubmit={handleSubmit}>\r\n          <input\r\n          type=\"text\"\r\n          value={inputCountry}\r\n          onChange={handleInputChange}\r\n          placeholder={foundCountry?\"Country\":\"Not Found | Try another country\"}\r\n          />\r\n        </form>\r\n    )\r\n}\r\n\r\nInputCountry.propTypes = {\r\n    setCountries: PropTypes.func.isRequired\r\n}\r\n","import formurlencoded from 'form-urlencoded';\r\nrequire('dotenv').config();\r\n\r\nexport const getSpotifyAlbum = async (artist, name, token) => {\r\n    \r\n    // Getting the spotify url and img\r\n    let frmName = formurlencoded({name});\r\n    let encName = frmName.replace('name=', '');        \r\n   \r\n    // Line below is more precise but not always gives results\r\n    // const resultQ = await fetch(`https://api.spotify.com/v1/search?q=${encName}+${encArtist}&type=track&limit=1`, { \r\n    const resultQ = await fetch(`https://api.spotify.com/v1/search?q=${encName}&type=track&limit=1`, {\r\n            method: 'GET',\r\n            headers: { 'Authorization' : 'Bearer ' + token}\r\n        });\r\n    \r\n    const dataQ = await resultQ.json();\r\n    // console.log(name, dataQ);\r\n    if (dataQ.tracks.items.length > 0){\r\n        const arrUrl = dataQ.tracks.items[0].album.images;\r\n        let img = '';\r\n        \r\n        if  (arrUrl.length > 2 ) {\r\n            img = arrUrl[2].url; // Image 64 x 64                \r\n        } else if (arrUrl.length > 1 ){\r\n            img = arrUrl[1].url; // Image 300 x 300   \r\n        } else {\r\n            img = arrUrl[0].url; // Image 640 x 640\r\n        }\r\n        let url = dataQ.tracks.items[0].external_urls.spotify;\r\n        return {url, img};\r\n    }\r\n    else {\r\n        // console.log(\"Track not found!: \" + artist, name)\r\n        return {};\r\n    }                               \r\n}\r\n","import React from 'react';\r\nimport {useFecthSpotifyAlbum} from '../hooks/useFetchSpotifyAlbum';\r\n\r\n\r\nexport const SongGridItem = ({artist, name, urlLyrics, token}) => {\r\n    \r\n    const {album, askingAlbum} = useFecthSpotifyAlbum(artist, name, token);\r\n    let albumFound = false;\r\n    if (album.length > 0) {\r\n        albumFound = true;\r\n    }    \r\n    console.log(\"album: \", albumFound);\r\n    console.log(\"asking album: \", askingAlbum);\r\n    //!askingAlbum&&albumFound&&  we need askingAlbum to set the visible property of a for the album pero\r\n    // Por alguna razon useFetchSpotifyAlbum es resuelto tardiamente porque vemos efectivamente el album \r\n    // desplegado en pagina pero no vemos en consola los datos\r\n    return (       \r\n        <div className=\"row info\">\r\n            <li className=\"col-1 number-list\">        \r\n                <div className=\"art-album animate__animated animate__fadeIn\">\r\n                    <a href={album.url} target=\"_blank\" rel=\"noopener noreferrer\"><img src={album.img} className=\"artImage\" alt=\"artAlbum\" width=\"64\" height=\"64\"></img></a>\r\n                </div>\r\n            </li>\r\n            <div className=\"col-11 song-artist animate__animated animate__fadeIn\">\r\n                <p className=\"name-song\"><a className=\"name-song\" href={urlLyrics} target=\"_blank\" rel=\"noopener noreferrer\">{name}</a><span className=\"name-artist\"> - {artist}</span></p>             \r\n            </div>\r\n        </div>            \r\n    )\r\n}","import {getSpotifyAlbum} from '../helpers/getSpotifyAlbum';\r\nimport {useState, useEffect} from 'react';\r\n\r\nexport const useFecthSpotifyAlbum = (artist, name, token) => {\r\n\r\n    const [state, setState] = useState (\r\n        {\r\n            album: {},\r\n            askingAlbum: true\r\n        }\r\n    );\r\n\r\n    useEffect(() => {\r\n        getSpotifyAlbum(artist, name, token).then(spotifyAlbum => {\r\n            setState({\r\n                album: spotifyAlbum, // Will receive an object {url, img}\r\n                askingToken: false\r\n            });\r\n        })\r\n    },[artist, name, token]); // PENDING: Me pregunto si el setState en el arreglo es el de estem mismo fetch o el que viene de adquirir el token.\r\n\r\n    return state; // {album: {}, askingAlbum: true};\r\n}","import lstCountries from './lstCountries';\r\nrequire('dotenv').config();\r\n// Gets the  top ten songs by country. Information provided by MusixMatch\r\n export const getMusixMatchSongs = async(country, setInfoFound) => {\r\n\r\n    // Origen de https://cors-anywhere.herokuapp.com/ en minuto 34 de\r\n    // https://www.youtube.com/watch?v=NDEt0KdDbhk&t=1883s \r\n    // NOTE: REGARDING REACT_APP_MM_KEY\r\n    // The name of the env variables in react must start with REACT_APP and\r\n    // react will recognize that variable as long as that variable is placed \r\n    // within the evn files (.env.local, .env.development.local, .env.test.local, .env.production.local)\r\n    // and  installed dotenv is installed in the project folder\r\n    // (in the hyperteminal npm i dotenv). If we don't use react convetion,\r\n    // then we need to require('dotenv').config() where the variable is used.\r\n    \r\n    // Here we have already validated the country. It exists in lstCountry. Just get it.\r\n    const [pais] = lstCountries.filter(c=>c.name===country);\r\n    // console.log(pais);\r\n    let codeCountry = pais.key;\r\n    const url = `https://cors-anywhere.herokuapp.com/https://api.musixmatch.com/ws/1.1/chart.tracks.get?chart_name=top&page=1&page_size=10&country=${codeCountry}&f_has_lyrics=1&apikey=${process.env.REACT_APP_MM_KEY}`;\r\n    const resp = await fetch(url);\r\n    const {message} = await resp.json();  \r\n    \r\n    const track_list =  message.body.track_list;\r\n    // console.log(\"tracks: \" , track_list);\r\n    \r\n    if (track_list === undefined || track_list.length === 0){\r\n        // console.log(\"Ups! We didn't get anything from MusicMatch for \" + country)\r\n        setInfoFound(false); // Comes from LyricsFinderApp through CountryGrid \r\n        return {};\r\n    }\r\n    else{\r\n        setInfoFound(true); // Comes from LyricsFinderApp through CountryGrid \r\n        // console.log(pais.name.toUpperCase(), \"MusixMatch List\", track_list);       \r\n        const songs = track_list.map( song => {\r\n            return {\r\n                id: song.track.track_id,\r\n                artist: song.track.artist_name,\r\n                album: song.track.album_name,\r\n                name: song.track.track_name,\r\n                urlLyrics: song.track.track_share_url,\r\n                codeCountry: codeCountry\r\n            }\r\n        });\r\n        // PENDING. \r\n        // // Getting the lyrics. However we are getting a link with these in getSpotifyInfo\r\n        // tracks.forEach(track => { \r\n        //     const getLyrics = async() => {\r\n        //         console.log(\"track id:\", track.id)\r\n        //         const urlLyrics = `https://cors-anywhere.herokuapp.com/https://api.musixmatch.com/ws/1.1/tracks.lyrics.get?track_id=${track.id}&apikey=${process.env.REACT_APP_MM_KEY}`;\r\n        //         const resp = await fetch(urlLyrics);\r\n\r\n        //         const {message} = await resp.json();  \r\n        //         console.log(\"Let's: \" ,  message); // PENDING> For some reason, message.body is returning \"\". \r\n        //         return message;\r\n        //     }\r\n        //     getLyrics();\r\n        // });\r\n        return songs;         \r\n        }   \r\n}","require('dotenv').config();\r\n\r\nexport const getSpotifyToken = async () => {\r\n    // console.log(\"in getSpotifyToken\");\r\n    // Getting token (might be in another helper component as well. Left it here for efficiency)\r\n    const result = await fetch('https://accounts.spotify.com/api/token', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type' : 'application/x-www-form-urlencoded', \r\n            // Remember to add the REACT_APP prefix in the env variables \r\n            'Authorization' : 'Basic ' + btoa(process.env.REACT_APP_CLIENT_ID + ':' + process.env.REACT_APP_CLIENT_SECRET)  \r\n        },\r\n        body: 'grant_type=client_credentials'\r\n    });\r\n    const data = await result.json();\r\n    // let token = data.access_token;\r\n    // console.log(\"Token: \", token);\r\n    const token = data.access_token;     \r\n    \r\n    // console.log(\"Desde getSpotify token: \", token);\r\n\r\n    if (!token || token === undefined){\r\n        // console.log(\"Token not provided by spotify!\")\r\n        return '';\r\n    }\r\n    return token;         \r\n}\r\n","import React from 'react';\r\nimport {SongGridItem} from './SongGridItem';\r\nimport {useFetchMusixMatchSongs} from '../hooks/useFetchMusixMatchSongs';\r\nimport {useFetchSpotifyToken} from '../hooks/useFetchSpotifyToken';\r\n\r\nexport const CountryGrid = ({country, setInfoFound}) => {\r\n    // renaming data as songs\r\n    const {data: songs, loading} = useFetchMusixMatchSongs(country, setInfoFound);\r\n    let topTenFound = false;\r\n    if (songs.length > 0){\r\n        topTenFound = true  \r\n        // console.log(\"songs:\", songs);\r\n        // Is not possible to use useFetchSpotifyToken() inside of a condition\r\n    }\r\n    // We suppose that always we are able to get data from spotify\r\n    // If not, we might want to separate from SongGridItem the\r\n    // top ten songs from MusiXmatch and the Album art and link from spotify.\r\n    // In that way we would be able to show at least the top ten MusiXmatch \r\n    // Rememeber that the spotify info depends on MusiXmatch info.\r\n    let tokenProvided = false;\r\n    const {token, askingToken} = useFetchSpotifyToken();\r\n    if (!askingToken && topTenFound){\r\n        if (token !== '') {\r\n            tokenProvided = true;       \r\n        }\r\n    }\r\n\r\n    // Now the below commented code is perfomed in the custom\r\n    // useFetchSongs hook. Left it as reference\r\n    // const [songs, setSongs] = useState([]);   \r\n    // // Preventing execution of getCountries more than once\r\n    // useEffect(()=>{\r\n    //     getSongs(country, setInfoNotFound).then(setSongs);\r\n    //     // Which is the same as below\r\n    //     // getSongs(country)\r\n    //     //     .then(sngs => setSongs(sngs));    \r\n    // }, [country, setInfoNotFound]);\r\n\r\n    return(\r\n        <div className=\"country-card animate__animated animate__fadeIn\">\r\n            <h3 className=\"country-header\">{country}</h3>\r\n            \r\n            {loading&&<p>Loading...</p>}\r\n\r\n            {!loading&&topTenFound&&!askingToken&&tokenProvided&&<ol>{ // Negaciones parecen redundante por las validaciones en las condicionales de arriba. Pero recordemos que estamos en procesos asincronos y por lo tanto requerimos asegurarnos de que estos se hayan completado exitosamente antes de renderizar el componente\r\n                songs.map(song =>(\r\n                <SongGridItem \r\n                    key={song.id} // Mandatory for every element of the\r\n                    // song={song} // If we send the song in this way then we would \r\n                    // need to destructure in SongGridItem in the argument as {song} \r\n                    // and then use song.name, song.artist, etc. \r\n                    // With the next predestructuring, we just simply destructure \r\n                    // directly the attributes of the objects like\r\n                    // {name, artist, etc}\r\n                    {...song} // Sending objetcs ready to assing to variables.\r\n                    token={token}\r\n                />\r\n                ))\r\n            }</ol>}\r\n            {/* { setTimeout(() => !songsFound&&<h1 className=\"noTracks\">No tracks found!</h1>, 1000) } */}\r\n            {!loading&&!topTenFound&&<h1 className=\"tracks-not-found\">No tracks found!</h1>}\r\n        </div>\r\n    ) \r\n}\r\n\r\n","import {useState, useEffect} from 'react';\r\nimport {getMusixMatchSongs} from '../helpers/getMusixMatchSongs';\r\n\r\nexport const useFetchMusixMatchSongs = (country, setInfoNotFound) => {\r\n    const [state, setState] = useState(\r\n        {\r\n            data: [],\r\n            loading: true\r\n        }\r\n    );\r\n \r\n        // Reminder: useEffect always expects a sync process. So they never are async.\r\n        // However, inside in the call back we can have an async process if needed\r\n        useEffect(() => {\r\n             // We can expect a little delay, that's why the state implementation in this custom hook\r\n             getMusixMatchSongs(country, setInfoNotFound).then(songs => {\r\n                setState({\r\n                    data: songs,\r\n                    loading: false\r\n                });\r\n            })\r\n        }, [country, setInfoNotFound]); // PENDING: Este fue el primer fecth funcional implementado. Pero este no pendende de setState y los otro s[i]? why?\r\n  \r\n    return state; // {data: [], loading: true};\r\n}","import {getSpotifyToken} from '../helpers/getSpotifyToken'\r\nimport {useState, useEffect} from 'react';\r\n\r\nexport const useFetchSpotifyToken = () => {\r\n    // console.log(\"in useFecthTOken\");\r\n    const [state, setState] = useState (\r\n        {\r\n            token: '',\r\n            askingToken: true\r\n        }\r\n    );\r\n\r\n    useEffect(() => {\r\n        getSpotifyToken().then(token => {\r\n            setState({\r\n                token: token,\r\n                askingToken: false\r\n            });\r\n        })\r\n    }, [setState]); // ?.[setState]\r\n\r\n    return state; // {token: '', askingToken: true};\r\n}","import React from \"react\";\r\n\r\nfunction Footer() {\r\n  const year = new Date().getFullYear();\r\n  return (\r\n    <footer>\r\n      <p>Copyright ⓒ {year}. Luis Garcia</p>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;","import React, { useState } from 'react';\r\nimport { InputCountry } from './components/InputCountry';\r\nimport { CountryGrid } from './components/CountryGrid';\r\nimport Footer from './components/Footer';\r\n// import { Spinner } from './Components/Spinner';\r\n\r\n// https://api.musixmatch.com/ws/1.1/chart.tracks.get?chart_name=top&page=1&page_size=10&country=us&f_has_lyrics=1&apikey=${process.env.REACT_APP_MM_KEY}\r\nexport const TopTenSongsByCountry = () => {\r\n   \r\n    // By definition countries must be unique, so we use them as keys for them in the li elements\r\n      \r\n    const [countries, setCountries] = useState([]); // Country written in English as it is found in the lstCountries.\r\n    // const [countries, setCountries] = useState(['Canada', 'United States', 'Mexico']); \r\n\r\n    const [infoFound, setInfoFound] = useState(true); // True MUST be initial\r\n    \r\n    // Next commented code now is done within AddCountry.\r\n    // See note below it as well.\r\n    // const handleAdd = () => {\r\n        //setCountries( countries => [...countries, 'newCountry']);\r\n        //setCountries([...countries, 'newCountry']); // Works as well \r\n        // }\r\n    // Now handleAdd disappears because setCountries is passed\r\n    // as parameter trough the  AddCountry's setCountries property \r\n    // Notices that  AddCountry's setCountries property and the \r\n    // the parameter setCountries have the same name which is \r\n    // not just for clarity in the code, but also, it will \r\n    // permite send to AddCountry a parameter with the same name \r\n    // wich makes is very convenient. However they don't have to\r\n    // match.\r\n    \r\n    return (\r\n        <>\r\n            <h1 className=\"header\">Lyrics of the Top Ten Songs by Country</h1>\r\n            {/* PENDING */}\r\n            {/* <div className=\"dropdown\">\r\n                <button className=\"btn btn-secondary dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                    Select a country\r\n                </button>\r\n                <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\r\n                {   \r\n                    paises.map(pais => (    \r\n                        <Pais \r\n                            key={pais.key}      // If for some reason we need to send the key to Pais, we should use another name, like llave={pais.key} and then we could use it within Pais component\r\n                            name={pais.name}\r\n                        />\r\n                    ))\r\n                }\r\n                </div>\r\n            </div>   */}\r\n                \r\n            <InputCountry \r\n                countries={countries}\r\n                setCountries={setCountries} // It will be defined within AddCountry\r\n                \r\n            />\r\n            {/* {showSpinner&&<Spinner />} */}\r\n            {!infoFound&&<h3 className=\"no-info animate__animated animate__shakeX\">Ups! MusixMatch didn't give us anything for that country!</h3>}\r\n            {/* NOTE. ol always must be draw becuase the constant updating of the countries */}\r\n            <ol> \r\n                {\r\n                    countries.map((country, i) => (\r\n                        <CountryGrid\r\n                            key={country}  // PENDING: Replacing the key for another one progr.\r\n                            country={country}\r\n                            setInfoFound={setInfoFound} // It will be defined within CountryGrid\r\n                            />\r\n                    ))\r\n                }    \r\n            </ol>\r\n            <Footer />            \r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {TopTenSongsByCountry} from './TopTenSongsByCountry';\nimport './index.css';\n\nReactDOM.render(\n  <TopTenSongsByCountry />,\n  document.getElementById('root'));\n"],"sourceRoot":""}